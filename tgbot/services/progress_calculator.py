import logging
from datetime import datetime

logger = logging.getLogger(__name__)

def calculate_achievement(total_keys: int, referrals: int, days_in_bot: int) -> str:
    """
    Calculates the user's achievement based on the number of keys, referrals and days spent in the bot.

    :param total_keys: The total number of keys generated by the user.
    :param referrals: Number of invited friends (referrals).
    :param days_in_bot: The number of days the user has spent in the bot.
    :return: The achievement key as a string.
    """
    if total_keys > 1200 and referrals > 50 and days_in_bot > 90:
        return 'absolute_leader'
    elif 501 <= total_keys <= 1199 and referrals > 20 and days_in_bot > 60:
        return 'game_legend'
    elif total_keys > 500 and referrals > 10 and days_in_bot > 40:
        return 'code_expert'
    elif total_keys > 450 and (referrals > 5 or days_in_bot > 30):
        return 'bonus_hunter'
    elif total_keys > 201 and days_in_bot > 10:
        return 'adventurer'
    return 'newcomer'

def calculate_days_in_bot(registration_date: datetime) -> int:
    """
    Calculates the number of days the user has spent in the bot.

    :param registration_date: The date of user registration in the bot.
    :return: Number of days elapsed from registration date to the current date.
    """
    try:
        return (datetime.now().date() - registration_date.date()).days
    except AttributeError as e:
        logger.error(f"Invalid registration date provided: {e}")
        return 0